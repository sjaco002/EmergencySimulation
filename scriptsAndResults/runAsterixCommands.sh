#! /bin/sh

#create dataverse and datasets
curl -G -H "Accept: application/x-adm" -v --data-urlencode 'query=drop dataverse channels if exists;
create dataverse channels;
use dataverse channels;

create type UserLocation as closed {
	recordId: uuid,
	location: circle,
	userName: string,
	timeStamp: datetime,
}
create type EmergencyShelter as closed {
	shelterName: string,
	location: circle
}

create type EmergencyReport as closed {
	reportId: uuid,
	Etype: string,
	impactZone: circle,
	timeStamp: datetime,
	expirationTime: datetime
}

create dataset UserLocations(UserLocation)
primary key recordId autogenerated;

create dataset EmergencyShelters(EmergencyShelter)
primary key shelterName;

create dataset EmergencyReports(EmergencyReport)
primary key reportId autogenerated;
' http://localhost:19002/query > /Users/stevenjacobs/asterix/data_generator/scriptsAndResults/reponses/reponses.txt



load dataset UserLocations using localfs (("path"="asterix_nc1:///Users/stevenjacobs/Desktop/EmergencyDataset/UserLocations.adm"),("format"="adm"));

load dataset EmergencyShelters using localfs(("path"="asterix_nc1:///Users/stevenjacobs/Desktop/EmergencyDataset/EmergencyShelters.adm"),("format"="adm"));

load dataset EmergencyReports using localfs(("path"="asterix_nc1:///Users/stevenjacobs/Desktop/EmergencyDataset/EmergencyReports.adm"),("format"="adm"));


for $report in dataset EmergencyShelters
for $location in dataset UserLocations
let $circle := create-circle($report.location,5.0)
where spatial-intersect($circle, $location.location)
return {
	"user at":$location.location,
	"shelter at":$report.location
}

create function RecentEmergenciesNearUser($userid) {  
  let $lastDay :=
    current-datetime() - day-time-duration("P1D")
  for $emergency in dataset EmergencyReports
  for $userlocation in dataset UserLocations
  where $userlocation.user-id = $userid   
    and 
      spatial-intersect(
      $emergency.impactZone,$userlocation.location)
    and $userlocation.timestamp >= $emergency.timestamp  
    and $userlocation.timestamp <= $emergency.expirationTime  
        and $emergency.timestamp > $lastDay
  return {  
    "message":$emergency.message,  
    "impactZone":$emergency.impactZone,  
    "shelter locations":
      for $shelter in dataset EmergencyShelters 
      where spatial-intersect
      ($emergency.impactZone,$shelter.location)
      return 
        $shelter.location
}};

create repetitive channel EmergencyChannel using  RecentEmergenciesNearUser@1 period duartion("PT10S");



use dataverse channels;

create function recentEmergenciesOfType($emergencyType){
	for $report in dataset EmergencyReports
	let $tenMinutesAgo := current-datetime() - day-time-duration("PT10M")
	where $report.timeStamp >= $tenMinutesAgo
	and $report.emergencyType = $emergencyType
	return $report
}
create repetitive channel recentEmergenciesOfTypeChannel using recentEmergenciesOfType@1 period duration("PT10M");
subscribe to recentEmergenciesOfTypeChannel ("tornado") on brokerA;




create function recentEmergenciesOfTypeAtLocation($emergencyType, $location){
	for $report in dataset EmergencyReports
	let $tenMinutesAgo := current-datetime() - day-time-duration("PT10M")
	where $report.timeStamp >= $tenMinutesAgo
	and $report.emergencyType = $emergencyType
	and spatial-intersect($report.impactZone,$location)
	return $report
}
create repetitive channel recentEmergenciesOfTypeAtLocationChannel using recentEmergenciesOfTypeAtLocation@2 period duration("PT10M");
subscribe to recentEmergenciesOfTypeAtLocationChannel ("tornado",create-point(30.0,70.0)) on brokerA;




create function recentEmergenciesOfTypeAtLocation($emergencyType, $location){
	for $report in dataset EmergencyReports
	let $tenMinutesAgo := current-datetime() - day-time-duration("PT10M")
	where $report.timeStamp >= $tenMinutesAgo
	and $report.emergencyType = $emergencyType
	and spatial-intersect($report.impactZone,$location)
	return {
		"impactZone":$report.impactZone,
		"message":$report.message,
		"shelters":for $shelter in dataset EmergencyShelters where spatial-intersect($report.impactZone,$shelter.location) return $shelter
	}
}
create repetitive channel recentEmergenciesOfTypeAtLocationChannel using recentEmergenciesOfTypeAtLocation@2 period duration("PT10M");
subscribe to recentEmergenciesOfTypeAtLocationChannel ("tornado",create-point(30.0,70.0)) on brokerA;